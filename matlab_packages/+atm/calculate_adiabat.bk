function [T,rv,rl,ri,T_rho] = calculate_adiabat(Ts,rts,ps,p,varargin)
%
% Function to calculate an adiabatic parcel ascent with various thermodynamic assumptions
%
% [T,r] = calculate_adiabat(Ts,rts,ps,p,[gamma,type,ice,deltaT])
%
% INPUTS:
%
% Ts = parcel temperature (K)
% rts = parcel total mixing ratio (kg/kg)
% ps = Parcel pressure (Pa)
% p = pressure levels to integrate parcel (Pa)
%
% gamma = fraction of condensate removed from parcel
% type, ice, deltaT are microphysical parameters
% See e_sat.m for details.
%
% OUTPUTS:
%
% T = temperature of parcel at all pressure levels (K)
% rv = water vapor mixing raio of parcel (kg/kg)
% rl = liquid water mixing ratio of parcel (kg/kg)
% ri = solid water mixing ratio of parcel (kg/kg)
% T_rho = density temperature of parcel (K)
%
% p must either be a vector or of size [Np size(Ts)] and should be sorted largest to smallest
% Ts, ps, and rts may be up to 3 dimensions
% The outputs are of size [Np size(Ts)]
%
% Parcel is lifted from ps to the top of the pressure matrix
% all values of p greater than  ps are filled with Nans
%
% This is helpful to vectorize the parcel ascent calculation over a 
% matrix of different columns which may have different surface pressures
%
%
% The adiabat is calculated by integrating the equation for the lapse rate
%
% dT/dp = f(T,rt,p) 
%
% See the function calculate_dTdp_adiabatic.m for more details
%
% The ascent is performed by calculating dT/dp assuming no fallout and
% then removing a fraction gamma of the water condensed during that step
% isothermally. In the case of gamma == 1, dT/dp is calculated assuming no
% condensed water for pseudoadiabatic ascent.
%
%
%
% The accuracy of these calculations may be checked using the script
% test_script.m. For the case of no ice and the default thermodynamics,
% an exact solution for a reversible parcel ascent is conservation of
% entropy. This script is accurate to within 0.5 K for dp = 50 hPa, and to
% within 0.1 K for dp = 20 hPa.
% 




% Read in the optional arguments
% These modify the default characteristics set in load_constants.m

c = atm.load_constants(varargin{2:end});
gamma = c.gamma;
if nargin >= 5; gamma  = varargin{1};  end


% Arrangement of the columns
xygrid = size(Ts);


% Make pressure interval matrix
if sum(size(p)>1) == 1 	% If the pressure is a vector
  p = p(:);
  p = repmat(p,[1 xygrid]);
end
  
dp = diff(p,1,1);


persistent big_dp
if max(abs(dp(:))) >= 5000 & isempty(big_dp)
   warning(['calculate_adiabat.m: You have pressure intervals greater than or equal to 50 hPa. ' ...
            'It is recommened that you subsample the pressure matrix for better accuracy of the integration.'])
   big_dp = 1;
end


% Initialize profiles
T  = nan([size(p,1) xygrid ]); % temperature
rv = nan([size(p,1) xygrid ]); % vapor
rl = nan([size(p,1) xygrid ]); % liquid
ri = nan([size(p,1) xygrid ]); % solid
rt = nan([size(p,1) xygrid ]); % total water


% Initialize surface values
[rvs,~,~] = atm.saturation_adjustment(ps,Ts,rts,c.type,c.ice,c.deltaT);

if gamma ==1
    rts = rvs; 
end
   

Ia_prev = zeros(size(Ts));
for k = 1:size(p,1)-1


    % Find regions where the surface pressure is larger than the current level p(k)
    Ia = ps>=reshape(p(k,:,:,:),xygrid);
      
    % Find regions where the surface is between levels (k-1) and k
    Is = Ia & ~Ia_prev;
 
    %% Integrate upwards (towards lower pressure) from the surface to the current model level for the regions where the current level p(k) is just above the surface

    % Calculate the dp
    if sum(Is(:))>0
      dps = reshape(p(k,:,:,:),xygrid) - ps;
      [T(k,Is),rt(k,Is),rv(k,Is),rl(k,Is),ri(k,Is)] = integrate_upwards(Ts(Is),rts(Is),ps(Is),dps(Is),gamma,c.type,c.ice,c.deltaT);
    end
    
    %% Now integrate from level k to level k+1
    [T(k+1,Ia),rt(k+1,Ia),rv(k+1,Ia),rl(k+1,Ia),ri(k+1,Ia)] = integrate_upwards(T(k,Ia),rt(k,Ia),p(k,Ia),dp(k,Ia),gamma,c.type,c.ice,c.deltaT);

        
    Ia_prev = Ia;

end



T_rho = T.*(1 + rv./c.eps)./(1+rv+rl+ri);




end


function [Tkp1,rtkp1,rvkp1,rlkp1,rikp1] = integrate_upwards(Tk,rtk,pk,dp,gamma,type,ice,deltaT)
%
% Integrate the equation for enthalpy upwards. 
% 1) 2nd order Runge-Kutta while conserving total water
% 2) precipitation fall out by fraction gamma
%
% If gamma == 1, then the calculation of dT/dp is done assuming no water,
% and no precipitation fallout is required.
%
    % calculate predictor
    [dTdp,rvk] = atm.calculate_dTdp_adiabatic(Tk,rtk,pk,gamma,type,ice,deltaT);
    
    T1 = Tk + dTdp.*dp./2;
    p1 = (pk+dp./2);
    [rv1,rl1,ri1] = atm.saturation_adjustment(p1,T1,rtk,type,ice,deltaT);
    if rl1+ri1 > 0
       [rl1,ri1] = atm.simple_fallout(T1,rvk-rv1,rl1,ri1,gamma,type,ice,deltaT);
    end
    rt1 = rv1+rl1+ri1;
    
    % calculate corrector 
    dTdp = atm.calculate_dTdp_adiabatic(T1,rt1,p1,gamma,type,ice,deltaT);
    
    Tkp1 = Tk + dTdp.*dp;
    pkp1 = pk+dp;
    [rvkp1,rlkp1,rikp1] = atm.saturation_adjustment(pkp1,Tkp1,rtk,type,ice,deltaT);
    if rlkp1+rikp1 > 0
       [rlkp1,rikp1] = atm.simple_fallout(Tkp1,rvk-rvkp1,rlkp1,rikp1,gamma,type,ice,deltaT);
    end
    rtkp1 = rvkp1+rlkp1+rikp1;
    
    
end
    

